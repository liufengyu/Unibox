//
//  RegisterController.m
//  Unibox_iOS
//
//  Created by 刘羽 on 15/10/23.
//  Copyright © 2015年 刘羽. All rights reserved.
//

#import "RegisterController.h"
#import "Header.h"
#import "API.h"
#import "MD5Helper.h"
#import "CheckUser.h"
#import "AppDelegate.h"
#import "UIImage+Color.h"
#import "TYAlertController.h"
#import "AFNetworking.h"
#import "Masonry.h"

@interface RegisterController () <UITextFieldDelegate>
{
    //用户名
    NSString *_userName;
    //密码
    NSString *_psd;
    //验证密码
    NSString *_surePsd;
    //验证码
    NSString *_verify;
    //验证码id
    NSString *_verifyID;
    
    //UIView *_clearView;
    UIView *_bgView;
    
    //用户名TF
    UITextField *_userNameTF;
    //密码TF
    UITextField *_psdTF;
    //确认密码TF
    UITextField *_surePsdTF;
    //验证码TF
    UITextField *_verifyTF;
    //服务协议勾选按钮
    UIButton *_selectBtn;
    //注册按钮
    UIButton *_registerBtn;
    
    //发送验证码按钮
    UIButton *_getVerifyBtn;
    
    //计时
    int count;
    NSTimer *_time;
    
    TYAlertController *_alertController;
}
@end

@implementation RegisterController


- (void)loadView{
    UIScrollView *sc = [[UIScrollView alloc]initWithFrame:[UIScreen mainScreen].bounds];
    self.view = sc;
}

- (void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    [self.navigationController.navigationBar setBackgroundImage:[UIImage imageWithColor:[UIColor whiteColor]] forBarMetrics:UIBarMetricsDefault];
}

- (void)viewWillDisappear:(BOOL)animated{
    [super viewWillDisappear:animated];
    [self.view endEditing:YES];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    self.automaticallyAdjustsScrollViewInsets = NO;
    self.title = @"注册";
    self.view.backgroundColor = RGB(232, 233, 232);
    [self configLeftBar];
    //创建UI
    [self createUI];
    
    //键盘升起和降落的通知
//    [[NSNotificationCenter defaultCenter] addObserver:self
//                                             selector:@selector(keyboardWillShow:)
//                                                 name:UIKeyboardWillShowNotification
//                                               object:nil];
//    [[NSNotificationCenter defaultCenter] addObserver:self
//                                             selector:@selector(keyboardWillHide:)
//                                                 name:UIKeyboardWillHideNotification
//                                               object:nil];
}

- (void)dealloc{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    [_time invalidate];
    _time = nil;
}

//- (void)keyboardWillShow:(NSNotification *)note{
//    CGRect keyboardBounds;
//    [[note.userInfo valueForKey:UIKeyboardFrameEndUserInfoKey] getValue: &keyboardBounds];
//    //NSLog(@"%@",note.userInfo);
//    NSNumber *duration = [note.userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey];
//    NSNumber *curve = [note.userInfo objectForKey:UIKeyboardAnimationCurveUserInfoKey];
//    
//    // Need to translate the bounds to account for rotation.
//    keyboardBounds = [self.view convertRect:keyboardBounds toView:nil];
//    //CGRect textFrame;
//    /*
//     //密码TF
//     UITextField *_psdTF;
//     //确认密码TF
//     UITextField *_surePsdTF;
//     //验证码TF
//     UITextField *_verifyTF;
//     */
//    //UITextField *textF = (UITextField *)[self.view viewWithTag:102];
//    CGFloat height = 0.0;
//    if (_psdTF.editing) {
//        height = (kScreenHeight - 64 - (_bgView.y + _bgView.height / 4 * 2)) - keyboardBounds.size.height;
//    } else if (_surePsdTF.editing) {
//        height = (kScreenHeight - 64 - (_bgView.y + _bgView.height / 4 * 3)) - keyboardBounds.size.height;
//    } else if (_verifyTF.editing) {
//        height = (kScreenHeight - 64 - (_bgView.y + _bgView.height / 4 * 4)) - keyboardBounds.size.height;
//    }
//    if (height < 0) {
//        [UIView beginAnimations:nil context:NULL];
//        [UIView setAnimationBeginsFromCurrentState:YES];
//        [UIView setAnimationDuration:[duration doubleValue]];
//        [UIView setAnimationCurve:[curve intValue]];
//        [UIView setAnimationDelegate:self];
//        
//        // set views with new info
//        _clearView.y = 64.0 + height;;
//        // commit animations
//        [UIView commitAnimations];
//    } else {
//        [UIView beginAnimations:nil context:NULL];
//        [UIView setAnimationBeginsFromCurrentState:YES];
//        [UIView setAnimationDuration:[duration doubleValue]];
//        [UIView setAnimationCurve:[curve intValue]];
//        [UIView setAnimationDelegate:self];
//        
//        // set views with new info
//        _clearView.y = 64.0;
//        // commit animations
//        [UIView commitAnimations];
//    }
//}
//
//- (void)keyboardWillHide:(NSNotification *)note{
//    CGRect keyboardBounds;
//    [[note.userInfo valueForKey:UIKeyboardFrameEndUserInfoKey] getValue: &keyboardBounds];
//    //NSLog(@"%@",note.userInfo);
//    NSNumber *duration = [note.userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey];
//    NSNumber *curve = [note.userInfo objectForKey:UIKeyboardAnimationCurveUserInfoKey];
//    
//    // Need to translate the bounds to account for rotation.
//    keyboardBounds = [self.view convertRect:keyboardBounds toView:nil];
//    if (_clearView.y != 64) {
//        [UIView beginAnimations:nil context:NULL];
//        [UIView setAnimationBeginsFromCurrentState:YES];
//        [UIView setAnimationDuration:[duration doubleValue]];
//        [UIView setAnimationCurve:[curve intValue]];
//        [UIView setAnimationDelegate:self];
//        
//        // set views with new info
//        _clearView.y = 64;
//        // commit animations
//        [UIView commitAnimations];
//    }
//}

#pragma mark 创建UI
- (void)createUI
{
    //UIView *clearView = [[UIView alloc]initWithFrame:CGRectMake(0, 64, kScreenWidth, kScreenHeight - 64.0)];
    //clearView.backgroundColor = [UIColor clearColor];
    //_clearView = clearView;
    //添加点按事件
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(tapClearView)];
    tap.cancelsTouchesInView = NO;
    [self.view addGestureRecognizer:tap];
    
    //[self.view addSubview:clearView];
    
    //logo图片
    UIImageView *logoView = [MyControl createImageViewFrame:CGRectMake((kScreenWidth - 82 / kHeightScale) / 2, 20 + 64.0, 82 / kHeightScale, 82 / kHeightScale) imageName:@"lg-logo"];
    //logoView.clipsToBounds = YES;
    logoView.layer.cornerRadius = 82 / kHeightScale / 2;
    [self.view addSubview:logoView];
    
    //背景视图
    UIView *bgView = [[UIView alloc]initWithFrame:CGRectMake(30, CGRectGetMaxY(logoView.frame) + 20, kScreenWidth - 60, (kScreenWidth - 60) / 5 * 4)];
    bgView.backgroundColor = [UIColor whiteColor];
    bgView.clipsToBounds = NO;
    bgView.layer.shadowColor = [UIColor grayColor].CGColor;
    bgView.layer.shadowOffset = CGSizeMake(1, 1);
    bgView.layer.shadowRadius = 1.0f;
    bgView.layer.shadowOpacity = 0.8;
    _bgView =bgView;
    [self.view addSubview:bgView];
    
    //每行的高度
    CGFloat height = bgView.height / 4;
    //用户名图片
    UIImageView *userIv = [MyControl createImageViewFrame:CGRectMake(10, (height - 24) / 2, 26.5, 24) imageName:@"lg-yonghuming"];
    [bgView addSubview:userIv];
    
    UIView *line1 = [[UIView alloc]initWithFrame:CGRectMake(CGRectGetMaxX(userIv.frame) + 10, height - 1, bgView.width - CGRectGetMaxX(userIv.frame) - 20, 1)];
    line1.backgroundColor = RGB(205, 205, 205);
    [bgView addSubview:line1];
    
    //密码图片
    UIImageView *psdIv = [MyControl createImageViewFrame:CGRectMake(10, height + (height- 28) / 2, 21, 28) imageName:@"lg-mima"];
    [bgView addSubview:psdIv];
    UIView *line2 = [[UIView alloc]initWithFrame:CGRectMake(CGRectGetMaxX(userIv.frame) + 10, height * 2 - 1, line1.width, 1)];
    line2.backgroundColor = RGB(205, 205, 205);
    [bgView addSubview:line2];
    
    //密码图片
    UIImageView *surePsdIv = [MyControl createImageViewFrame:CGRectMake(10, height * 2 + (height - 28) / 2, 21, 28) imageName:@"lg-mima"];
    [bgView addSubview:surePsdIv];
    UIView *line3 = [[UIView alloc]initWithFrame:CGRectMake(CGRectGetMaxX(userIv.frame) + 10, height * 3 - 1, line1.width, 1)];
    line3.backgroundColor = RGB(205, 205, 205);
    [bgView addSubview:line3];
    
    //验证码图片
    UIImageView *verifyIv = [MyControl createImageViewFrame:CGRectMake(10, height * 3 + (height - 29.5) / 2, 22.5, 29.5) imageName:@"lg-yanzhengma"];
    [bgView addSubview:verifyIv];
    //手机号textField
    UITextField *userNameTF = [[UITextField alloc]initWithFrame:CGRectMake(line1.x, 10, line1.width, (height - 1) - 20)];
    userNameTF.font = [UIFont systemFontOfSize:14.0];
    userNameTF.placeholder = @"手机号";
    userNameTF.delegate = self;
    userNameTF.keyboardType = UIKeyboardTypeNumberPad;
    _userNameTF = userNameTF;
    [bgView addSubview:userNameTF];
    
    //密码textField
    UITextField *psdTF = [[UITextField alloc]initWithFrame:CGRectMake(line1.x, height + 10, line1.width, userNameTF.height)];
    psdTF.font = [UIFont systemFontOfSize:14.0];
    psdTF.placeholder = @"请输入密码";
    psdTF.delegate = self;
    psdTF.secureTextEntry = YES;
    _psdTF = psdTF;
    [bgView addSubview:psdTF];
    
    //再次输入密码textField
    UITextField *surePsdTF = [[UITextField alloc]initWithFrame:CGRectMake(line1.x, height * 2 + 10, line1.width, userNameTF.height)];
    surePsdTF.font = [UIFont systemFontOfSize:14.0];
    surePsdTF.placeholder = @"请再次输入密码";
    surePsdTF.delegate = self;
    surePsdTF.secureTextEntry = YES;
    _surePsdTF = surePsdTF;
    [bgView addSubview:surePsdTF];
    //验证码textField
    UITextField *verifyTF = [[UITextField alloc]initWithFrame:CGRectMake(line1.x, height * 3 + 10, 110 / kWidthScale, userNameTF.height)];
    verifyTF.font = [UIFont systemFontOfSize:14.0];
    verifyTF.placeholder = @"请输入验证码";
    verifyTF.delegate = self;
    verifyTF.backgroundColor = RGB(232, 233, 232);
    verifyTF.layer.cornerRadius = 5.0f;
    _verifyTF = verifyTF;
    verifyTF.keyboardType = UIKeyboardTypeNumberPad;
    [bgView addSubview:verifyTF];
    
    //获取验证码按钮
    UIButton *getVerifyBtn = [MyControl createButtonWithFrame:CGRectMake(bgView.width - 110 / kWidthScale, verifyTF.y, 110 / kWidthScale, userNameTF.height) target:self SEL:@selector(verifyBtnClick) title:@"获取验证码"];
    _getVerifyBtn = getVerifyBtn;
    getVerifyBtn.titleLabel.font = [UIFont systemFontOfSize:14.0];
    [getVerifyBtn setTitleColor:kRed forState:UIControlStateNormal];
    [getVerifyBtn setTitleColor:kMidgray forState:UIControlStateDisabled];
    [bgView addSubview:getVerifyBtn];
    
    //勾选服务协议按钮
    UIButton *selectBtn = [MyControl createButtonWithFrame:CGRectMake(bgView.x, CGRectGetMaxY(bgView.frame) + 15, 20, 20) target:self SEL:@selector(agreeBtnClick:) title:nil];
    [selectBtn setBackgroundImage:imageNamed(@"lg-xuanze-us") forState:UIControlStateNormal];
    [selectBtn setBackgroundImage:imageNamed(@"lg-xuanze-s") forState:UIControlStateSelected];
    _selectBtn = selectBtn;
    [self.view addSubview:selectBtn];
    
    //服务协议label
    UILabel *lb = [MyControl createLabelWithFrame:CGRectMake(CGRectGetMaxX(selectBtn.frame) + 5, selectBtn.y, 200, 30) Font:12.0f Text:nil];
    NSMutableAttributedString *str = [[NSMutableAttributedString alloc]initWithString:@"我已阅读相关服务协议并同意注册" attributes:nil];
    [str addAttributes:@{NSForegroundColorAttributeName:kRed} range:NSMakeRange(6, 4)];
    lb.attributedText = str;
    [lb sizeToFit];
    lb.y = selectBtn.y + (selectBtn.height - lb.height) / 2;
    [self.view addSubview:lb];
    lb.userInteractionEnabled = YES;
    UITapGestureRecognizer *tapOnLb = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(alertTK)];
    [lb addGestureRecognizer:tapOnLb];
    
    //注册按钮
    UIButton *registerBtn = [MyControl createButtonWithFrame:CGRectMake(bgView.x, CGRectGetMaxY(selectBtn.frame) + 10, bgView.width, 45) target:self SEL:@selector(registerBtnClick) title:@"注册"];
    _registerBtn = registerBtn;
    registerBtn.titleLabel.font = [UIFont systemFontOfSize:14.0];
    [registerBtn setBackgroundImage:[UIImage imageWithColor:RGB(230, 88, 53)] forState:UIControlStateNormal];
    [registerBtn setBackgroundImage:[UIImage imageWithColor:[UIColor grayColor]] forState:UIControlStateDisabled];
    registerBtn.enabled = NO;
    
    //registerBtn.backgroundColor = kRed;
    [self.view addSubview:registerBtn];
    
//    UIView *naviBarView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, kScreenWidth, 64.0)];
//    naviBarView.backgroundColor = [UIColor whiteColor];
//    [self.view addSubview:naviBarView];
}

#pragma mark 弹出条款
- (void)alertTK{
    UIView *alertView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, kScreenWidth - 60, kScreenHeight / 4 * 3)];
    alertView.backgroundColor = [UIColor whiteColor];
    alertView.layer.cornerRadius = 5.0;
    
    UILabel *titleLb = [UILabel new];
    titleLb.text = @"服务条款";
    titleLb.font = [UIFont systemFontOfSize:14.0];
    [alertView addSubview:titleLb];
    [titleLb mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.equalTo(alertView);
        make.top.equalTo(alertView).offset(10);
    }];
    
    UIView *line1 = [UIView new];
    line1.backgroundColor = kLightgray;
    [alertView addSubview:line1];
    [line1 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.and.left.equalTo(alertView);
        make.top.equalTo(titleLb.mas_bottom).offset(10);
        make.height.equalTo(@1);
    }];
    
    UIScrollView *sc = [UIScrollView new];
    [alertView addSubview:sc];
    [sc mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(line1.mas_bottom).offset(5);
        make.right.equalTo(alertView).offset(-10);
        make.left.equalTo(alertView).offset(10);
        make.bottom.equalTo(alertView).offset(-40);
    }];
    
    NSString *str = [NSString stringWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@"fuwutiaokuan" ofType:@"txt"] encoding:NSUTF8StringEncoding error:nil];
    UILabel *label = [UILabel new];
    label.text = str;
    label.font = [UIFont systemFontOfSize:12.0];
    label.numberOfLines = 0;
    [sc addSubview:label];
    [label mas_makeConstraints:^(MASConstraintMaker *make) {
        make.edges.equalTo(sc);
        make.width.equalTo(sc);
    }];
    
    UIView *line2 = [UIView new];
    line2.backgroundColor = kLightgray;
    [alertView addSubview:line2];
    [line2 mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.and.left.equalTo(alertView);
        make.top.equalTo(sc.mas_bottom).offset(5);
        make.height.equalTo(@1);
    }];
    
    
    UIButton *sureBtn = [UIButton buttonWithType:UIButtonTypeCustom];
    [sureBtn setTitle:@"确定" forState:UIControlStateNormal];
    [sureBtn addTarget:self action:@selector(sureBtnClick) forControlEvents:UIControlEventTouchUpInside];
    [sureBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
    [alertView addSubview:sureBtn];
    [sureBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.and.left.and.bottom.equalTo(alertView);
        make.top.equalTo(line2.mas_bottom);
    }];
    
    _alertController = [TYAlertController alertControllerWithAlertView:alertView preferredStyle:TYAlertControllerStyleAlert];
    [self presentViewController:_alertController animated:YES completion:nil];
}

#pragma mark 协议确认
- (void)sureBtnClick{
    [_alertController dismissViewControllerAnimated:YES];
}

#pragma mark 背景点按手势
- (void)tapClearView{
    [self.view endEditing:YES];
    
}


#pragma mark - UITextFieldDelegate
/*
 return键响应
 */
- (BOOL)textFieldShouldReturn:(UITextField *)textField
{
    if (textField == _userNameTF) {
        [textField resignFirstResponder];
        [_psdTF becomeFirstResponder];
    }
    else if (textField == _psdTF)
    {
        [textField resignFirstResponder];
        [_surePsdTF becomeFirstResponder];
    }
    else if (textField == _surePsdTF)
    {
        [textField resignFirstResponder];
        [_verifyTF becomeFirstResponder];
    }
    else
    {
        [textField resignFirstResponder];
    }
    return YES;
}


/*
 结束编辑
 */
- (void)textFieldDidEndEditing:(UITextField *)textField
{
    if (textField == _userNameTF) {
        //判断手机号是否正确
        _userName = textField.text;
        if(_userName.length){
            //调用判断手机号接口
        }
    } else if (textField == _psdTF) {
        _psd = _psdTF.text;
        if (_surePsd.length) {
            if (![_psd isEqualToString:_surePsd]) {
                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"温馨提示" message:@"两次密码不一致" delegate:self cancelButtonTitle:@"确定" otherButtonTitles:nil, nil];
                [alert show];
            }
        }
    } else if (textField == _surePsdTF){
        _surePsd = _surePsdTF.text;
        if (_psd.length) {
            if (![_psd isEqualToString:_surePsd]) {
                UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"温馨提示" message:@"两次密码不一致" delegate:self cancelButtonTitle:@"确定" otherButtonTitles:nil, nil];
                [alert show];
            }
        }
    } else {
        _verify = _verifyTF.text;
    }
}

//- (void)verifyMobile:(NSString *)phone{
//    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
//    NSDictionary *dic = @{@"phone":phone};
//    AppDelegate *app = [UIApplication sharedApplication].delegate;
//    [manager GET:[NSString stringWithFormat:@"http://%@%@",app.host_ip, CheckPhone_URL] parameters:dic success:^(AFHTTPRequestOperation *operation, id responseObject) {
//        if ([responseObject[@"ret"] boolValue]) {
//            //            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"温馨提示" message:@"输入的手机号未注册" delegate:nil cancelButtonTitle:@"确定" otherButtonTitles:nil, nil];
//            //            [alert show];
//            //[self alertMessage:@"输入的手机号未注册"];
//            UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"提示"
//                                                                                     message:@"手机号已注册"
//                                                                              preferredStyle:UIAlertControllerStyleAlert];
//            UIAlertAction *ac = [UIAlertAction actionWithTitle:@"确定"
//                                                         style:UIAlertActionStyleCancel
//                                                       handler:nil];
//            [alertController addAction:ac];
//            [self presentViewController:alertController animated:YES completion:nil];
//        } else {
//            
//        }
//    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
//        //
//    }];
//}

- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string
{
    if ([string isEqualToString:@"\n"])
    {
        return YES;
    }
    NSString * toBeString = [textField.text stringByReplacingCharactersInRange:range withString:string];
    
    if (textField == _userNameTF){
        if ([toBeString length]){
            if ([toBeString length] > 11) {
                textField.text = [toBeString substringToIndex:11];
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"手机号不能超过11位" delegate:nil cancelButtonTitle:@"确定" otherButtonTitles:nil, nil];
                [alert show];
                return NO;
            } else {
                if ([_psdTF.text length] && [_surePsdTF.text length] && [_verifyTF.text length] && _selectBtn.selected) {
                    _registerBtn.enabled = YES;
                }
            }
        } else {
            _registerBtn.enabled = NO;
        }
    } else if (textField == _psdTF){
        if ([toBeString length]) {
            if ([_userNameTF.text length] && [_surePsdTF.text length] && [_verifyTF.text length] && _selectBtn.selected) {
                _registerBtn.enabled = YES;
            }
        } else {
            _registerBtn.enabled = NO;
        }
    } else if (textField == _surePsdTF) {
        if ([toBeString length]) {
            if ([_userNameTF.text length] && [_psdTF.text length] && [_verifyTF.text length] && _selectBtn.selected) {
                _registerBtn.enabled = YES;
            }
        } else {
            _registerBtn.enabled = NO;
        }
    } else {
        if ([toBeString length]) {
            if ([_userNameTF.text length] && [_psdTF.text length] && [_surePsdTF.text length] && _selectBtn.selected) {
                _registerBtn.enabled = YES;
            }
        } else {
            _registerBtn.enabled = NO;
        }
    }
    return YES;
}




#pragma mark - 同意按钮点击事件
- (void)agreeBtnClick:(UIButton *)btn
{
    btn.selected = !btn.selected;
    if (btn.selected) {
        if ([_userNameTF.text length] && [_psdTF.text length] && [_surePsdTF.text length] && [_verifyTF.text length]) {
            _registerBtn.enabled = YES;
        } else {
            _registerBtn.enabled = NO;
        }
    } else {
        _registerBtn.enabled = NO;
    }
}

#pragma mark - 获取验证码按钮点击事件
- (void)verifyBtnClick
{
    
    if (![_userName isEqualToString:_userNameTF.text]){
        _userName = _userNameTF.text;
    }
//    if ([_userName length] == 11) {
//        //_userName = _userNameTF.text;
//        //调用判断手机号接口
//        [self verifyMobile:_userName];
//        //如果存在return
//    } else {
//        //请输入11位手机号
//        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"温馨提示" message:@"请输入11位手机号" delegate:nil cancelButtonTitle:@"确定" otherButtonTitles:nil, nil];
//        [alert show];
//    }
    
    if ([CheckUser validateMobile:_userName]) {
        [self verifyMobile:_userName];
    } else {
        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"提示" message:@"请输入正确的手机号" delegate:nil cancelButtonTitle:@"确定" otherButtonTitles:nil, nil];
        [alert show];
    }
    
}

#pragma mark - 发送验证码
- (void)sendVerifyCode{
    AFNetworkReachabilityManager *netStatus = [AFNetworkReachabilityManager sharedManager];
    [netStatus startMonitoring];
    /*
     AFNetworkReachabilityStatusUnknown          = -1,
     AFNetworkReachabilityStatusNotReachable     = 0,
     AFNetworkReachabilityStatusReachableViaWWAN = 1,
     AFNetworkReachabilityStatusReachableViaWiFi = 2,
     */
    [netStatus setReachabilityStatusChangeBlock:^(AFNetworkReachabilityStatus status) {
        if (status == AFNetworkReachabilityStatusNotReachable) {
            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"提示" message:@"当前无网络,请联网后重试" delegate:nil cancelButtonTitle:@"确定" otherButtonTitles:nil, nil];
            [alert show];
        } else {
            count = 60;
            [_getVerifyBtn setTitle:[NSString stringWithFormat:@"%d秒后重新获取",count] forState:UIControlStateNormal];
            
            _getVerifyBtn.enabled = NO;
            _time = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(timeChange) userInfo:nil repeats:YES];
            
            
            
            AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
            //发送验证码
            //参数1:phone    11位数字
            //参数2:type     1 注册
            //              2 找回密码
            NSDictionary *dic = @{
                                  @"phone":_userName,
                                  @"type":@"1"
                                  };
            NSLog(@"%@",_userName);
            AppDelegate *app = [UIApplication sharedApplication].delegate;
            [manager GET:[NSString stringWithFormat:@"http://%@%@",app.host_ip, SendVCode_URL] parameters:dic success:^(AFHTTPRequestOperation *operation, id responseObject) {
                if (![[responseObject objectForKey:@"ret"] intValue])
                {
                    _verifyID = [responseObject objectForKey:@"vid"];
                }
                else
                {
                    NSLog(@"获取验证码失败");
                }
            } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
                NSLog(@"请求验证码失败");
            }];
        }
    }];
}

- (void)timeChange{
    count--;
    if (count == 0){
        [_time invalidate];
        _time = nil;
        [_getVerifyBtn setTitle:@"重新获取验证码" forState:UIControlStateNormal];
        _getVerifyBtn.enabled = YES;
        return;
    }
    [_getVerifyBtn setTitle:[NSString stringWithFormat:@"%d秒后重新获取",count] forState:UIControlStateNormal];
}

#pragma mark - 注册按钮点击事件
- (void)registerBtnClick
{
    _registerBtn.enabled = NO;
    JGProgressHUD *hud = [[JGProgressHUD alloc]initWithStyle:JGProgressHUDStyleDark];
    hud.interactionType = JGProgressHUDInteractionTypeBlockTouchesOnHUDView;
    JGProgressHUDFadeZoomAnimation *an = [JGProgressHUDFadeZoomAnimation animation];
    hud.animation = an;
    hud.textLabel.text = @"注册中...";
    __block BOOL confirmationAsked = NO;
    hud.tapOnHUDViewBlock = ^(JGProgressHUD *h) {
        if (confirmationAsked) {
            [h dismiss];
        } else {
            h.indicatorView = [[JGProgressHUDErrorIndicatorView alloc]init];
            h.textLabel.text = @"取消 ?";
            confirmationAsked = YES;
            
            CABasicAnimation *an = [CABasicAnimation animationWithKeyPath:@"shadowOpacity"];
            an.fromValue = @(0.0f);
            an.toValue = @(0.5f);
            
            an.repeatCount = HUGE_VALF;
            an.autoreverses = YES;
            
            an.duration = 0.75f;
            
            h.HUDView.layer.shadowColor = [UIColor redColor].CGColor;
            h.HUDView.layer.shadowOffset = CGSizeZero;
            h.HUDView.layer.shadowOpacity = 0.0f;
            h.HUDView.layer.shadowRadius = 8.0f;
            
            [h.HUDView.layer addAnimation:an forKey:@"glow"];
            
            __weak __typeof(h) wH = h;
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(4.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                if (wH && confirmationAsked) {
                    confirmationAsked = NO;
                    __strong __typeof(wH) sH = wH;
                    
                    sH.indicatorView = [[JGProgressHUDIndeterminateIndicatorView alloc] initWithHUDStyle:sH.style];
                    sH.textLabel.text = @"注册中...";
                    [h.HUDView.layer removeAnimationForKey:@"glow"];
                }
            });
            
        }
    };
    hud.tapOutsideBlock = ^(JGProgressHUD *h) {
        if (confirmationAsked) {
            confirmationAsked = NO;
            h.indicatorView = [[JGProgressHUDIndeterminateIndicatorView alloc] initWithHUDStyle:h.style];
            h.textLabel.text = @"加载中...";
            [h.HUDView.layer removeAnimationForKey:@"glow"];
        }
    };
    
    
    [hud showInView: self.view];
    
    
    
    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
    /*
     ** phone    11位数字
     ** psd1     第一次密码md5后的字符串
     ** psd2     第二次密码md5后的字符串
     ** vcode    验证码
     ** vid      验证码对应唯一ID
     */
    
    NSDictionary *dic = @{
                          @"phone":_userName,
                          @"psd1":[MD5Helper MD5WithString:_psd],
                          @"psd2":[MD5Helper MD5WithString:_surePsd],
                          @"vcode":_verify,
                          @"vid":_verifyID
                          };
    AppDelegate *app = [UIApplication sharedApplication].delegate;
    [manager GET:[NSString stringWithFormat:@"http://%@%@",app.host_ip,Register_URL] parameters:dic success:^(AFHTTPRequestOperation *operation, id responseObject) {
        if (![[responseObject objectForKey:@"ret"] intValue]) {
            [User setObject:[responseObject objectForKey:@"accessToken"] forKey:kAccessToken];
            [User setObject:[responseObject objectForKey:@"memberId"] forKey:kMemberId];
            hud.indicatorView = [[JGProgressHUDSuccessIndicatorView alloc]init];
            
            hud.textLabel.font = [UIFont systemFontOfSize:14.0f];
            
            hud.textLabel.text = @"注册完成";
            
            hud.position = JGProgressHUDPositionCenter;
            
            [hud dismissAfterDelay:1.0f animated:YES];
        }
        hud.indicatorView = [[JGProgressHUDErrorIndicatorView alloc]init];
        hud.textLabel.text = @"注册失败";
        hud.layoutChangeAnimationDuration = 0.3;
        [hud dismissAfterDelay:1.0f animated:YES];
        NSLog(@"%@",responseObject);
        
    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
        hud.indicatorView = [[JGProgressHUDErrorIndicatorView alloc]init];
        hud.textLabel.text = @"请求失败";
        hud.layoutChangeAnimationDuration = 0.3;
        [hud dismissAfterDelay:1.0f animated:YES];
    }];
}

- (void)verifyMobile:(NSString *)phone{
    
    
    
    AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];
    NSDictionary *dic = @{@"phone":phone};
    AppDelegate *app = [UIApplication sharedApplication].delegate;
    [manager GET:[NSString stringWithFormat:@"http://%@%@",app.host_ip, CheckPhone_URL] parameters:dic success:^(AFHTTPRequestOperation *operation, id responseObject) {
        if ([responseObject[@"ret"] boolValue]) {
            UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"温馨提示" message:@"输入的手机号已注册" delegate:nil cancelButtonTitle:@"确定" otherButtonTitles:nil, nil];
            [alert show];
        } else{
            [self sendVerifyCode];
        }
    } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
        //
    }];
}


- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
@end
